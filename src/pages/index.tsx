import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
// import { Inter } from "@next/font/google";
import blogData from "@/data/blogData";
import React, { useState } from "react";
import {
  Box,
  Typography,
  List,
  TextField,
  Stack,
  Pagination,
  Grid,
  Card,
  CardMedia,
  CardContent,
  Chip,
  ListItem,
} from "@mui/material";
import { GitHub, LinkedIn } from "@mui/icons-material";
import BlogData from "../types/types";
import useActiveCategory from "@/hooks/useActiveCategory";

// const inter = Inter({ subsets: ["latin"] });

const LINKS = [
  {
    href: "https://emersoft.co/",
    name: "Home",
  },
  {
    href: "https://emersoft.co/about/",
    name: "Get to know us",
  },
  {
    href: "https://emersoft.co/our-work/",
    name: "Our work",
  },
  {
    href: "https://emersoft.co/services/hire-developers/",
    name: "Hire Developers",
  },
  {
    href: "https://emersoft.co/services/",
    name: "Services",
  },
  {
    href: "https://careers.emersoft.co/",
    name: "Careers",
  },
  // {
  //   href: "http://localhost:3000/",
  //   name: "Blog",
  // },
];

export default function Blog() {
  const [stableBlogData, setStableBlogData] = useState<BlogData>(blogData);
  const [blogPosts, setBlogPosts] = useState<BlogData>(blogData);
  const { activeCategory, handleCategoryButton } = useActiveCategory();

  const filteredPostsByCategoryId = (id: number, name: string) => {
    console.log("Chosen ID", id);
    console.log("Filtered table", {
      posts: stableBlogData.posts.filter((post) =>
        post.categories.includes(id)
      ),
    });

    setBlogPosts((prevState) => ({
      ...prevState,
      posts: stableBlogData.posts.filter((post) =>
        post.categories.includes(id)
      ),
      categories: prevState.categories,
    }));

    handleCategoryButton(name);
  };

  const filteredPostsBySearchInput = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    console.log(e.target.value);

    setBlogPosts((prevState) => ({
      ...prevState,
      posts: stableBlogData.posts.filter(({ title }) =>
        title.toLowerCase().includes(e.target.value.toLowerCase())
      ),
      categories: prevState.categories,
    }));
  };

  return (
    <>
      <Head>
        <title>Patryk Kwasek | Emersoft - Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Box className="max-w-screen-xl w-11/12 my-0 mx-auto">
          <header className="flex justify-between items-center py-12">
            <Box className="flex items-center">
              <Image
                src={"/apple-touch-icon.png"}
                width={150}
                height={150}
                alt="Avatar"
                className="w-12 h-12 mr-4 rounded-full"
                priority
              />
              <span className="font-bold">Patryk Kwasek</span>
            </Box>

            <nav className="flex row">
              <ul className="flex row">
                {LINKS.map(({ href, name }) => (
                  <li key={name}>
                    <Link
                      href={href}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="px-3 hover:text-emersoft-green focus:outline-none focus:shadow-outline"
                    >
                      {name}
                    </Link>
                  </li>
                ))}
                <li>
                  <Link
                    href="http://localhost:3000/"
                    className="text-white bg-emersoft-green font-bold py-4 px-3 hover:bg-emersoft-black duration-500 focus:outline-none focus:shadow-outline"
                  >
                    Blog
                  </Link>
                </li>
              </ul>
            </nav>
          </header>

          <Box>
            <Typography
              variant="h3"
              className="text-emersoft-green text-3xl font-bold mb-4 uppercase"
            >
              Hello, my name is Patryk
            </Typography>
            <Typography variant="h1" className="text-4xl lg:text-7xl font-bold">
              Emersoft README.md
            </Typography>

            <Box>
              <TextField
                type="search"
                // placeholder="Search in Readme..."
                placeholder="Search blog posts..."
                onChange={filteredPostsBySearchInput}
                className="w-full my-4"
              />
            </Box>

            <Box className="flex overflow-y-auto">
              {stableBlogData.categories.map(({ id, name, slug }) => (
                <Chip
                  key={slug}
                  label={name}
                  variant="filled"
                  className={`${
                    slug === activeCategory && "text-white bg-black"
                  } mb-3 mr-2 px-1 font-bold hover:bg-black hover:text-white`}
                  onClick={() => filteredPostsByCategoryId(id, slug)}
                />
              ))}
            </Box>

            <Box>
              <Typography variant="h2" className="text-3xl font-medium mb-3">
                Featured Posts
              </Typography>

              <Grid container spacing={5}>
                {blogPosts.posts.map(
                  ({ id, title, excerpt, imageUrl, categories }) => (
                    <Grid item xs={12} sm={6} lg={4} key={`Post-${id}`}>
                      <Card className="min-h-[525px] h-full rounded-3xl cursor-pointer">
                        <CardMedia
                          className="w-full h-1/2 rounded-t-3xl"
                          image={imageUrl}
                          title={title}
                        />

                        <CardContent>
                          <Typography className="my-3 font-bold">
                            {categories.map((categoryId) => {
                              const filteredCategory =
                                stableBlogData.categories.find(
                                  (category) => category.id === categoryId
                                );

                              if (
                                !filteredCategory ||
                                filteredCategory.name === "All"
                              ) {
                                return null;
                              }

                              return (
                                <span
                                  key={filteredCategory.id}
                                  className="mr-2"
                                >
                                  {filteredCategory.name}
                                </span>
                              );
                            })}
                          </Typography>

                          <Typography
                            variant="h5"
                            component="h2"
                            className="mb-3"
                          >
                            {title}
                          </Typography>

                          <Typography variant="body2" component="p">
                            {excerpt}
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                  )
                )}
              </Grid>

              {/* Pagination */}
              <Stack spacing={2}>
                <Pagination
                  count={Math.ceil(blogPosts.posts.length / 6)}
                  siblingCount={1}
                  boundaryCount={1}
                  variant="outlined"
                  shape="rounded"
                  className="flex justify-center my-4"
                />
              </Stack>
            </Box>
          </Box>
        </Box>

        <footer className="border-t border-gray-300 py-8">
          <Box className="flex justify-end max-w-screen-xl w-11/12 my-0 mx-auto">
            <Typography>
              <Link
                href="https://pl.linkedin.com/in/patryk-kwasek-0b9a821b3"
                className="underline"
                target="_blank"
                rel="noopener noreferrer"
              >
                <LinkedIn
                  className="text-[#0077B5]"
                  fontSize="medium"
                  titleAccess="LinkedIn profile"
                />
              </Link>
            </Typography>

            <Typography>
              <Link
                href="https://github.com/Web-Hulk"
                className="underline"
                target="_blank"
                rel="noopener noreferrer"
              >
                <GitHub
                  className="text-black"
                  fontSize="medium"
                  titleAccess="Github profile"
                />
              </Link>
            </Typography>
          </Box>
        </footer>
      </main>
    </>
  );
}
